/*
 * Copyright 2018 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

enum Platform {
  ALL(),
  APPENGINE('clouddriver-appengine',
            'clouddriver-google-common'),
  AWS('clouddriver-aws',
      'clouddriver-ecs',
      'clouddriver-eureka', // Pull into separate "Discovery" platform, along with cd-consul?
      'clouddriver-elasticsearch-aws'),
  AZURE('clouddriver-azure'),
  DCOS('clouddriver-dcos'),
  GCE('clouddriver-consul',
      'clouddriver-google',
      'clouddriver-google-common'),
  KUBERNETES('clouddriver-kubernetes',
             'clouddriver-docker'),
  OPENSTACK('clouddriver-openstack'),
  ORACLE('clouddriver-oracle'),
  TITUS('clouddriver-titus')

  List<String> modules

  Platform(String... modules) {
    this.modules = Arrays.asList(modules)
  }
}

def includePlatform(Platform platform) {
  def modules = platform.modules
  if (modules.isEmpty()) {
    modules = (Platform.values() - Platform.ALL).collect({ it.modules }).flatten().unique().sort()
  }
  println "Including Platform modules: ${modules}"
  include (*modules.toArray())
}

includePlatforms.split(",").each {
  includePlatform(it as Platform)
}
